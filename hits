#!/usr/bin/env perl
# 
# HIgh-Throughput Sequencing (hits) pipeline in Xu Lab
# Author: Qinhu Wang (wangqinhu@nwafu.edu.cn)
# Copyright (c) Xu Lab, Northwest A&F University
#

use strict;
use warnings;
use Getopt::Std;

my $appname = 'hits';
my $version = '0.10.0';
my %options = ();

init();
hits();

# Subroutines

# Switch for HIgh Throughput Sequencing analysis pipelines
sub hits {

	if (uc($options{'p'}) eq 'D') {
		dnaseq();
	}
	if (uc($options{'p'}) eq 'R') {
		rnaseq();
	}

	exit;

}

# DNAseq pipeline
sub dnaseq {

	check_app("bowtie2-build");
	check_app("bowtie2");
	check_app("samtools");
	check_app("bcftools");

	print STDERR "Parsing fastq file(s) in $options{'d'}\n";
	my $fqs = find_fastq($options{'d'});
	my $ploidy = $options{'n'};
	my $num = keys %{$fqs};
	print STDERR "Total $num pairs of fastq file(s) found.\n";

	if ($num < 1) {
		die "Aborted: No fastq files found!\n";
	}

	print STDERR "Creating output directory: $options{'o'}\n";
	my $dir = create_directory($options{'o'});

	unless (-e $options{'g'} . ".1.bt2") {
		build_db('bowtie2-build', $options{'g'}, $dir);
	}

	print STDERR "Runing DNAseq pipeline\n";
	foreach my $fq (sort keys %{$fqs}) {
		print STDERR "Mapping $fq ...\n";
		my $map_cmd = "bowtie2 -p $options{'t'} -x " . $options{'g'} .
			' -1 ' . $fqs->{$fq}->{'1'} .
			' -2 ' . $fqs->{$fq}->{'2'};
		my $sam2bam_cmd = "samtools view -bS -";
		my $sortbam_cmd = "samtools sort -o $dir/bam/$fq.bam -";
		system("$map_cmd | $sam2bam_cmd | $sortbam_cmd");
		system("java -jar ~/sf/picard/picard-2.jar MarkDuplicates I=$dir/bam/$fq.bam O=$dir/bam/$fq.nodup.bam M=$dir/bam/$fq.marked_dup_metrics.txt REMOVE_DUPLICATES=false ASSUME_SORTED=true");
		system("samtools index $dir/bam/$fq.nodup.bam");

		print STDERR "Calling variants ...\n";
		my $callvar_cmd = "samtools mpileup -uf $options{'g'} $dir/bam/$fq.nodup.bam | bcftools call --ploidy $ploidy -cv -O v - > $dir/vcf/$fq.vcf";
		system($callvar_cmd);
	}

	print STDERR "Done\n\n";

	return;

}

# RNAseq pipeline
sub rnaseq {

	check_app("hisat2-build");
	check_app("hisat2");
	check_app("samtools");
	check_app("featureCounts");

	print STDERR "Parsing fastq file(s) in $options{'d'}\n";
	my $fqs = find_fastq($options{'d'});
	my $num = keys %{$fqs};
	print STDERR "Total $num pairs of fastq file(s) found.\n";

	if ($num < 1) {
		die  "Aborted: No fastq files found!\n";
	}

	print STDERR "Creating output directory: $options{'o'}\n";
	my $dir = create_directory($options{'o'});

	unless (-e $options{'g'} . ".1.ht2" or -e $options{'g'} . ".1.ht2l") {
		build_db('hisat2-build', $options{'g'}, $dir);
	}

	print STDERR "Runing RNAseq pipeline\n";
	my $rnaseq_strand_option = '';
	if ($options{'s'} == 1) {
		$rnaseq_strand_option = '--rna-strandness RF ';
	}
	foreach my $fq (sort keys %{$fqs}) {
		print STDERR "Mapping $fq ...\n";
		my $hisat2_options = $rnaseq_strand_option .  "--max-intronlen $options{'i'} --no-unal --no-temp-splicesite " .
		"--novel-splicesite-outfile $dir/bam/$fq.splicesite --novel-splicesite-infile $dir/bam/$fq.splicesite";
		my $map_cmd = "hisat2 -p $options{'t'} $hisat2_options -x " . $options{'g'} .
			' -1 ' . $fqs->{$fq}->{'1'} .
			' -2 ' . $fqs->{$fq}->{'2'};
		my $sam2bam_cmd = "samtools view -bS -";
		my $sortbam_cmd = "samtools sort -o $dir/bam/$fq.bam -";
		system("$map_cmd | $sam2bam_cmd | $sortbam_cmd");
		system("samtools index $dir/bam/$fq.bam");
	}

	print STDERR "Counting features ...\n";
	my $featureCounts_cmd = "featureCounts -p -s 2 -t exon -g gene_id -a $options{'a'} -o $dir/featureCounts/rnaseq.raw.tsv $dir/bam/*.bam";
	system($featureCounts_cmd);
	format_featurecount_table($dir);

	print STDERR "Done\n\n";

	return;

}

# If no bowtie2/hisat2 db found, build it.
sub build_db {

	my ($app, $file, $dir) = @_;
	unless (-e $file) {
		die "Aborted: $file not found!\n";
	}
	system("cp $file $dir/refseq.fa");
	system("$app $file $dir/refseq.fa");
	# update option -g to the new db index
	$options{'g'} = "$dir/refseq.fa";

	return;

}

# Generate a breif gene expression summary table accroding featureCounts table
sub format_featurecount_table {

	my $dir = shift;
	open (RAW, "$dir/featureCounts/rnaseq.raw.tsv") or die "Cannot open $dir/featureCounts/rnaseq.raw.tsv: $!\n";
	open (TSV, ">$dir/featureCounts/rnaseq.tsv") or die "Cannot open $dir/featureCounts/rnaseq.tsv: $!\n";
	while (my $line = <RAW>) {
		chomp $line;
		next if ($line =~ /^#/);
		if ($line =~ /^Geneid/) {
			$line =~ s/$dir\/bam\///g;
			$line =~ s/.bam//g;
		}
		my @w = split /\t/, $line, 7;
		print TSV "$w[0]\t$w[6]\n";
	}
	close RAW;
	close TSV;

	return;

}

# Find fastq files in the directory specified
sub find_fastq {

	my $dir = shift;

	$dir =~ s/\/$//;

	my %fastq = ();
	print STDERR "Fastq file(s):\n";
	opendir (FASTQ, $dir) or die "Cannot open $dir: $!\n";
	foreach my $file (sort readdir FASTQ) {
		next if ($file =~ /^\./);
		# regex eg. seq1.1.fq.gz
		#           ----+  =====
		#           prefix: $1, '----'
		#              sep: $2, '+'
		#           suffix: $3, '====='
		#             -----++++++++++++  =========================
		if ($file =~ /(\S+)([\_|\-|\.])1.(clean.fq.gz|clean.fastq.gz|clean.fq|clean.fastq|fq.gz|fastq.gz|fq|fastq)$/) {
			next unless (-e "$dir/$1" . $2 . "2." . $3);
			$fastq{$1}{'1'} = "$dir/$1" . $2 . "1." . $3;
			$fastq{$1}{'2'} = "$dir/$1" . $2 . "2." . $3;
			print STDERR " + $1\n";
			print STDERR "  - fastq file 1: $fastq{$1}{'1'}\n";
			print STDERR "  - fastq file 2: $fastq{$1}{'2'}\n";
		}
	}
	closedir FASTQ;
	return \%fastq;

}

# Create the directoies that required in the pipelines
sub create_directory {

	my $dir = shift;

	$dir =~ s/\/$//;
	
	if (uc($options{'p'}) eq 'D') {
		system("mkdir -p $dir/bam");
		system("mkdir -p $dir/vcf");
	}
	if (uc($options{'p'}) eq 'R') {
		system("mkdir -p $dir/bam");
		system("mkdir -p $dir/featureCounts");
	}

	return $dir;

}

# Handling the arguments
sub init {

	# Check the number of arguments
	if ($#ARGV == -1) {
		usage();
	}

	# Options
	getopts("p:d:g:n:a:s:i:o:t:hv", \%options) or die "$!\n" . usage();

	# Check help
	if ($options{'h'}) {
		usage();
	}

	# Check version
	if ($options{'v'}) {
		version();
	}

	# Check inputs
	unless ( defined($options{'p'}) ) {
		print STDERR "Aborted: No pipeline specified!\n";
		usage();
	}
	unless ( (uc($options{'p'}) eq 'D') or (uc($options{'p'}) eq 'R') ) {
		print STDERR "Aborted: Unknown pipeline selected!\n";
		usage();
	}

	# Check options that required in all the pipelines
	unless ( defined($options{'g'}) ) {
		print STDERR "Aborted: No reference genome specified!\n";
		usage();
	}
	unless ( defined($options{'d'}) ) {
		print STDERR "Aborted: No fastq directory specified!\n";
		usage();
	}
	unless ( defined($options{'o'}) ) {
		print STDERR "Aborted: No output directory specified!\n";
		usage();
	}

	# In DNAseq, ignore option -a
	if (uc($options{'p'}) eq 'D') {
		if ( defined($options{'a'}) ) {
			print STDERR "Warning: unused option \"-a\" was set as \"$options{'a'}\", ignored.\n";
		}
		unless ( defined($options{'n'}) ) {
			print STDERR "Warning: no ploidy specified! set to 1.\n";
			$options{'n'} = 1;
		}
	}

	# Check important RNA-seq options
	if (uc($options{'p'}) eq 'R') {
		# In RNAseq, must specify option -a
		unless ( defined($options{'a'}) ) {
			print STDERR "Aborted: No annotation file specified!\n";
			usage();
		}
		# Defalut: stranded RNA-seq
		unless (defined($options{'s'})) {
			print STDERR "No strand information of RNA-seq specified, set to defualt (1-stranded)\n";
			$options{'s'} = 1;
		} else {
			unless ($options{'s'} == 1 or $options{'s'} == 0) {
				print STDERR "Aborted: Unknown strand information of RNA-seq specified!\n";
				print STDERR "required: 1 or 0, specified as $options{'a'}\n";
				usage();
			}
		}
		unless ( defined($options{'i'}) ) {
			print STDERR "No max intronlen specified, set to defualt 4000 bp\n";
			$options{'i'} = 4000;
		}
	}


	return;

}

# Detect if application was installed
sub check_app {

	my $app = shift;

	my $which = `which $app 2>&1`;
	chomp $which;
	my @w = split /\//, $which;
	if (!defined($w[-1]) or $w[-1] ne "$app") {
		die "Aborted: $app is not found!\n";
	} else {
		return;
	}

}

# Usage
sub usage {

	print <<USAGE;

$appname $version

Usage:

    $appname <option>

    -p  pipeline for DNAseq [D] or RNAseq [R] analysis
    -d  directory that containing FASTQ file(s), .fq/.fastq(.gz)
    -g  reference genome
    -n  set ploidy [default 1, work with -p D]
    -a  annotation file in GTF format [work with -p R]
    -s  strand-specific information [work with -p R]
        1 - stranded [default]
        0 - unstranded
    -i  max intron length [work with -p R, default 4000 bp]
    -o  output directory
    -t  number of alignment threads
    -h  help
    -v  version

Examples:

    $appname -p D -d fastq_dir -g genome.fa -o output_dir -t 8
    $appname -p R -d fastq_dir -g genome.fa -a gene.gtf -s 1 -o output_dir -t 8

Reporting Bugs:

    Bug reports can be submitted via the web:
    https://github.com/xulab-nwafu/hits/issues

USAGE
	exit;

}

# Version
sub version {

	print $appname . ' ' . $version, "\n";
	exit;

}
